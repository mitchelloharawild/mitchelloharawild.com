{
  "hash": "8e5102f8b0bb8f87f23b65a8915f7c25",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Introducing fable\ndescription: 'Forecasting models for tidy time series'\nauthor: Mitchell O'Hara-Wild\ndate: '2019-09-30'\ncategories:\n  - release\n  - time series\n  - tidyverse\ntags:\n  - cran\n  - package\n  - time series\nimage: 'fable-opengraph.png'\nimage-alt: 'fable: tidy time series forecasting'\n---\n\n\n\n\n`<img src=\"fable.png\" class=\"hex\"/>`{=html}\n\nThe [fable package](http://fable.tidyverts.org/) bridges the gap between popular tidy data analysis workflows and time series forecasting. Using tidy temporal data from [Earo Wang](https://earo.me/)'s [tsibble package](https://tsibble.tidyverts.org/), fable allows complex forecasting tasks to be performed with ease. The package is the next iteration of [Rob Hyndman](https://robjhyndman.com/)'s [forecast package](http://pkg.robjhyndman.com/forecast/), providing the tools and extensibility support needed to overcome current and future time series challenges. I'm ecstatic to announce that the fable package is now available on CRAN! So whether you're a seasoned forecasting fanatic or you're making your first foray into forecasting, getting started is easier than ever:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"fable\")\n```\n:::\n\n\n# fable: forecasting with tables\n\nA major difference between *fable* and its predecessor *forecast* is the way in which time series data is stored. A substantial [source of confusion](https://robjhyndman.com/hyndsight/seasonal-periods/) for *forecast* package users is the creation and use of `ts` objects. The *fable* package is built upon the *tsibble* package, which (as the name suggests) is a `tibble` with time series structure. Among many benefits, the data is now in the same structure provided in most data files. This makes loading time series data into R a breeze (and less error-prone), as the column of data specifying the observation's measurement time is now actually used in the data! Other benefits of a tabular data structure include integration with non-temporal packages and support for multiple time series with mixed measurement types.\n\n<div class = \"row\">\n<div class=\"col-lg-7\" style=\"font-size:110%;\">\n\n> A fable is never true, but it tells you something important about reality - and that's what a forecast is.\n>\n> *Rob Hyndman (2018-06-21)*\n>\n> New York Open Statistical Programming Meetup\n> https://youtu.be/yx6OQ-8HofU?t=2484\n\n</div>\n\n<div class=\"col-lg-5\">\n<img src=\"fable-nyhackr.png\">\n</div>\n</div>\n\nThe fable package has been actively developed over the past two years, and has undergone a couple of substantial revisions to the interface prior to release. Despite these changes the package's goals have remained constant:\n\n* Seamlessly integrate within a tidy data analysis workflow.\n* Provide a consistent, intuitive and familiar interface for time series modelling.\n* Simple forecasting (and reconciliation) of many related time series.\n* Encourage extensibility by developing general forecasting tools.\n* Provide forecasts with distributions, not intervals.\n* Naturally support sub-daily and high frequency data with complex structures.\n\nThe first release of fable implements all of these goals and more. While this post won't cover the details of how these goals are achieved, I hope that the forecasting example below illustrates how these goals have been realised for forecasting in practice. I have no doubt that there will be many more blog posts which will explore fable in greater detail.\n\n# Forecasting with fable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tsibble)\nlibrary(fable)\n```\n:::\n\n\nTo see how fable can be applied to real forecasting problems we'll create some simple forecasts of Australia's domestic tourism. This is the same dataset analysed in the [*Introducing feasts*](../feasts) post, which provides a visual introduction to the data using the closely related [feasts package](http://feasts.tidyverts.org/).\n\n### Data manipulation and exploration\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 24,320 x 5 [1Q]\n# Key:       Region, State, Purpose [304]\n   Quarter Region   State           Purpose  Trips\n     <qtr> <chr>    <chr>           <chr>    <dbl>\n 1 1998 Q1 Adelaide South Australia Business  135.\n 2 1998 Q2 Adelaide South Australia Business  110.\n 3 1998 Q3 Adelaide South Australia Business  166.\n 4 1998 Q4 Adelaide South Australia Business  127.\n 5 1999 Q1 Adelaide South Australia Business  137.\n 6 1999 Q2 Adelaide South Australia Business  200.\n 7 1999 Q3 Adelaide South Australia Business  169.\n 8 1999 Q4 Adelaide South Australia Business  134.\n 9 2000 Q1 Adelaide South Australia Business  154.\n10 2000 Q2 Adelaide South Australia Business  169.\n# i 24,310 more rows\n```\n\n\n:::\n:::\n\n\nThis dataset contains quarterly domestic overnight trips for a variety of locations and purposes around Australia. When disaggregated by the key variables (Region, State and Purpose), we have a total of 304 separate time series to forecast.\n\nLet's start simple and use [dplyr](https://dplyr.tidyverse.org/) to calculate the total overnight domestic trips for Australia.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_aus <- tourism %>% \n  summarise(Trips = sum(Trips))\ntourism_aus\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 80 x 2 [1Q]\n   Quarter  Trips\n     <qtr>  <dbl>\n 1 1998 Q1 23182.\n 2 1998 Q2 20323.\n 3 1998 Q3 19827.\n 4 1998 Q4 20830.\n 5 1999 Q1 22087.\n 6 1999 Q2 21458.\n 7 1999 Q3 19914.\n 8 1999 Q4 20028.\n 9 2000 Q1 22339.\n10 2000 Q2 19941.\n# i 70 more rows\n```\n\n\n:::\n:::\n\n\nAt minimum, we should plot the data before considering a model for it. A tsibble dataset works seamlessly with [ggplot2](https://ggplot2.tidyverse.org/), allowing you to design informative graphics for this data. For a quick look at the data we also support `autoplot()` functionality (and more time series plots discussed in [*Introducing feasts*](../feasts)).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_aus %>% \n  autoplot(Trips)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/tourism-plot-1.png){width=816}\n:::\n:::\n\n\nThe first step to forecasting this data would be to identify appropriate model(s). A seasonal model would be required as the data shows signs of seasonality. Including trend would also be helpful, although as the trend has changed over time (becoming positive after 2010) our model will need to support this too. Considering this, an [exponential smoothing model](https://otexts.com/fpp3/ets.html) may be suitable for this data.\n\n### Model specification\n\nModel specification in fable supports a formula based interface (much like `lm()` and other cross-sectional modelling functions). A model formula in R is expressed using `response ~ terms`, where the formula's left side describes the response (and any transformations), while the right describes terms used to model the response. The terms of a fable model often include model specific functions called 'specials'. They describe how the time series dynamics are captured by the model, and the supported specials can be found in the method's help file.\n\nExponential smoothing models are defined using the [`ETS()`](http://fable.tidyverts.org/reference/ETS.html) function, which provides 'specials' for controlling the `error()`, `trend()` and `season()`. These time series elements appear to be additively combined to give the response, and so an appropriate model specification may be:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nETS(Trips ~ error(\"A\") + trend(\"A\") + season(\"A\"))\n```\n:::\n\n\nIdentifying an appropriate model specification can be tricky as it requires some background knowledge about temporal patterns and ETS models. Don't be discouraged! If your unsure, you can let `ETS()` and other models automatically choose the best specification if multiple options are provided. So if you can't tell if the seasonality is additive (`season(\"A\")`) or multiplicative (`season(\"M\")`), you can let fable decide via:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nETS(Trips ~ error(\"A\") + trend(\"A\") + season(c(\"A\", \"M\")))\n```\n:::\n\n\nIn fact this automatic selection is the default option. If the `season()` special is not specified (excluded entirely from formula), the seasonal structure will be automatically chosen as either none, additive or multiplicative seasonality with `season(c(\"N\", \"A\", \"M\"))`. Automatic selection also occurs when `error()` and `trend()` are not specified, allowing an appropriate ETS model to be determined fully automatically with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nETS(Trips)\n```\n:::\n\n\n### Model estimation\n\nA model is estimated using the `model()` function, which uses a dataset to train one or more specified models.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- tourism_aus %>% \n  model(auto_ets = ETS(Trips))\nfit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A mable: 1 x 1\n      auto_ets\n       <model>\n1 <ETS(A,A,A)>\n```\n\n\n:::\n:::\n\n\nThe resulting mable (model table) object informs us that an ETS(A,A,A) model has been automatically selected. Within that cell a complete description of the model is stored, including everything needed to produce forecasts (such as estimated coefficients). The `report()` function can be used if the mable contains only one model, which provides a familiar display of the models estimates and summary measures.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreport(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Trips \nModel: ETS(A,A,A) \n  Smoothing parameters:\n    alpha = 0.4495675 \n    beta  = 0.04450178 \n    gamma = 0.0001000075 \n\n  Initial states:\n     l[0]      b[0]      s[0]     s[-1]     s[-2]    s[-3]\n 21689.64 -58.46946 -125.8548 -816.3416 -324.5553 1266.752\n\n  sigma^2:  699901.4\n\n     AIC     AICc      BIC \n1436.829 1439.400 1458.267 \n```\n\n\n:::\n:::\n\n\nThe package also supports verbs from the [broom package](https://broom.tidyverse.org/), allowing you to `tidy()` your coefficients, `glance()` your model summary statistics, and `augment()` your data with predictions. These verbs provide convenient and consistent methods for accessing useful values from an estimated model.\n\n### Producing forecasts\n\nThe `forecast()` function is used to produce forecasts from estimated models. The forecast horizon (`h`) is used to specify how far into the future forecasts should be made. `h` can be specified with a number (the number of future observations) or text (the length of time to predict). You can also specify the time periods to predict using `new_data`, which allows you to provide a tsibble of future time points to forecast, along with any exogenous regressors which may be required by the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc <- fit %>% \n  forecast(h = \"2 years\")\nfc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A fable: 8 x 4 [1Q]\n# Key:     .model [1]\n  .model   Quarter             Trips  .mean\n  <chr>      <qtr>            <dist>  <dbl>\n1 auto_ets 2018 Q1   N(29068, 7e+05) 29068.\n2 auto_ets 2018 Q2  N(27794, 870750) 27794.\n3 auto_ets 2018 Q3 N(27619, 1073763) 27619.\n4 auto_ets 2018 Q4 N(28627, 1311711) 28627.\n5 auto_ets 2019 Q1 N(30336, 1587455) 30336.\n6 auto_ets 2019 Q2 N(29062, 1903591) 29062.\n7 auto_ets 2019 Q3 N(28887, 2262980) 28887.\n8 auto_ets 2019 Q4 N(29895, 2668392) 29895.\n```\n\n\n:::\n:::\n\n\nYou'll notice that this function gives us a fable (forecast table), which contains point forecasts in the `Trips` column, and the forecast's distribution in the `.distribution` column. If we had specified a transformation in the model specification (say `ETS(log(Trips))`), the resulting forecasts would be [automatically back transformed and adjusted for bias](http://fable.tidyverts.org/articles/transformations.html).\n\nWhile using and storing distributions is powerful, they can be more difficult to interpret than intervals. Forecast intervals can be extracted from a forecast distribution using the `hilo()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc %>% \n  hilo(level = c(80, 95))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 8 x 6 [1Q]\n# Key:       .model [1]\n  .model   Quarter             Trips  .mean                  `80%`\n  <chr>      <qtr>            <dist>  <dbl>                 <hilo>\n1 auto_ets 2018 Q1   N(29068, 7e+05) 29068. [27995.95, 30140.25]80\n2 auto_ets 2018 Q2  N(27794, 870750) 27794. [26597.85, 28989.59]80\n3 auto_ets 2018 Q3 N(27619, 1073763) 27619. [26291.05, 28947.01]80\n4 auto_ets 2018 Q4 N(28627, 1311711) 28627. [27158.76, 30094.28]80\n5 auto_ets 2019 Q1 N(30336, 1587455) 30336. [28721.43, 31950.79]80\n6 auto_ets 2019 Q2 N(29062, 1903591) 29062. [27293.57, 30829.90]80\n7 auto_ets 2019 Q3 N(28887, 2262980) 28887. [26959.18, 30814.90]80\n8 auto_ets 2019 Q4 N(29895, 2668392) 29895. [27801.09, 31987.98]80\n# i 1 more variable: `95%` <hilo>\n```\n\n\n:::\n:::\n\n\nRather than reading values from a table, it is usually easier to evaluate forecast behaviour by making a plot. Much like plotting a tsibble, we have provided `autoplot()` and `autolayer()` methods for plotting forecasts. Unlike the *forecast* package, *fable* does not store the original data and fitted model in the `fable` object, so the historical data must be passed in to see it on the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc %>% \n  autoplot(tourism_aus)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fc-plot-1.png){width=816}\n:::\n:::\n\n\n### Choosing the best model\n\nWhile `ETS()` has been able to choose the best ETS model for this data, a different model class may give even better results. The `model()` function is capable of estimating many specified models. Let's compare the ETS model with an automatically selected [`ARIMA()`](fable.tidyverts.org/reference/ARIMA.html) model (much like [`forecast::auto.arima()`](http://pkg.robjhyndman.com/forecast/reference/auto.arima.html)) and a linear model ([`TSLM()`](http://fable.tidyverts.org/reference/TSLM.html)) with linear time trend and dummy seasonality.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- tourism_aus %>% \n  model(\n    ets = ETS(Trips),\n    arima = ARIMA(Trips),\n    lm = TSLM(Trips ~ trend() + season())\n  )\nfit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A mable: 1 x 3\n           ets                    arima      lm\n       <model>                  <model> <model>\n1 <ETS(A,A,A)> <ARIMA(0,1,1)(0,1,1)[4]>  <TSLM>\n```\n\n\n:::\n:::\n\n\nThe mable now contains three models, each specified model is stored in a separate column.\n\nWe can produce forecasts and visualise the results using the same code as before. To minimise overplotting I have chosen to only show the 80\\% forecast interval, and have made the forecasts semi-transparent.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit %>% \n  forecast(h = \"2 years\") %>% \n  autoplot(tourism_aus, level = 80, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/many-fc-plot-1.png){width=816}\n:::\n:::\n\n\nIt is clear from this plot that the linear model (`lm`) is unable to capture the trend change at 2010. The linear model could be improved by using a piecewise linear trend with a knot at 2010, but I'll leave that for you to try (replace `trend()` with `trend(knots = yearquarter(\"2010 Q1\"))`).\n\nVisually distinguishing the best model between ETS and ARIMA is difficult. The ETS model predicts a stronger trend than the ARIMA model, and both produce very similar seasonal patterns.\n\nTo choose the best model we can make use of numerical accuracy measures using the `accuracy()` function. This function can compute various accuracy measures based on [point forecasts](https://fabletools.tidyverts.org/reference/point_accuracy_measures.html), [forecast intervals](https://fabletools.tidyverts.org/reference/interval_accuracy_measures.html) and [forecast distributions](https://fabletools.tidyverts.org/reference/distribution_accuracy_measures.html). It also allows you to specify your own accuracy measure functions.\n\nTraining (in-sample) accuracy will be given when applied to a mable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccuracy(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 10\n  .model .type           ME  RMSE   MAE    MPE  MAPE  MASE RMSSE     ACF1\n  <chr>  <chr>        <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>    <dbl>\n1 ets    Training  1.05e+ 2  794.  604.  0.379  2.86 0.636 0.653 -0.00151\n2 arima  Training  1.54e+ 2  840.  632.  0.584  2.97 0.666 0.691 -0.0432 \n3 lm     Training -1.82e-13 1715. 1436. -0.597  6.67 1.51  1.41   0.816  \n```\n\n\n:::\n:::\n\n\nThe in-sample accuracy suggests that the ETS model performs best. This is because it has the lowest values for all accuracy measures (lower values indicate less errors). As expected, the linear model is much worse than the others.\n\nForecast (out-of-sample) accuracy will be computed when a fable is used with `accuracy()`. Note that you will need to withhold a test set to base your accuracy on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_aus %>% \n  # Withhold the last 3 years before fitting the model\n  filter(Quarter < yearquarter(\"2015 Q1\")) %>% \n  # Estimate the models on the training data (1998-2014)\n  model(\n    ets = ETS(Trips),\n    arima = ARIMA(Trips),\n    lm = TSLM(Trips ~ trend() + season())\n  ) %>% \n  # Forecast the witheld time peroid (2015-2017)\n  forecast(h = \"3 years\") %>% \n  # Compute accuracy of the forecasts relative to the actual data \n  accuracy(tourism_aus)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 10\n  .model .type    ME  RMSE   MAE   MPE  MAPE  MASE RMSSE  ACF1\n  <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 arima  Test  1397. 1795. 1452.  5.31  5.54  1.58  1.49 0.496\n2 ets    Test  1895. 2281. 1909.  7.23  7.28  2.08  1.90 0.613\n3 lm     Test  4664. 4822. 4664. 18.1  18.1   5.09  4.01 0.634\n```\n\n\n:::\n:::\n\n\nThe out-of-sample accuracy shows that the ARIMA model produced the most accurate forecasts for 2015-2017 using data from 1998-2014.\n\nSo which model is best? In-sample (training) accuracy uses one-step ahead forecast errors from model coefficients based on the whole data. In many senses this is unrealistic, as the forecasts are partially based on information not available when forecasting into the future. Additionally, these forecasts are based only on one-step ahead accuracy, where in practice you may be interested in forecasting a few years ahead.\n\nAlternatively, out-of-sample (test) accuracy is more akin to the actual forecasting task: predicting the future using only past information. The accuracy is based on forecast errors from three years of data never seen by the model. This advantage is also a problem, as the accuracy is now based on just 12 values, so the performance is more sensitive to chance. Calculating accuracy using [time series cross-validation](https://otexts.com/fpp3/tscv.html) overcomes many of these problems, but will take more time to compute.\n\nIn short, both ETS and ARIMA models are producing reasonable forecasts for this data. Instead of choosing a favourite, we can do better by averaging them which usually gives better results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- tourism_aus %>% \n  model(\n    ets = ETS(Trips),\n    arima = ARIMA(Trips)\n  ) %>% \n  mutate(\n    average = (ets + arima) / 2\n  )\nfit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A mable: 1 x 3\n           ets                    arima       average\n       <model>                  <model>       <model>\n1 <ETS(A,A,A)> <ARIMA(0,1,1)(0,1,1)[4]> <COMBINATION>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfit %>% \n  forecast(h = \"2 years\") %>% \n  autoplot(tourism_aus, level = 80, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ensemble-fc-plot-1.png){width=816}\n:::\n:::\n\n\n### Scaling it up\n\nProducing forecasts for a single time series isn't particularly exciting, and certainly doesn't align well with modern forecasting problems. Suppose we were interested in forecasting tourism for each of Australia's major states (and territories).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_state <- tourism %>% \n  group_by(State) %>% \n  summarise(Trips = sum(Trips))\ntourism_state\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 640 x 3 [1Q]\n# Key:       State [8]\n   State Quarter Trips\n   <chr>   <qtr> <dbl>\n 1 ACT   1998 Q1  551.\n 2 ACT   1998 Q2  416.\n 3 ACT   1998 Q3  436.\n 4 ACT   1998 Q4  450.\n 5 ACT   1999 Q1  379.\n 6 ACT   1999 Q2  558.\n 7 ACT   1999 Q3  449.\n 8 ACT   1999 Q4  595.\n 9 ACT   2000 Q1  600.\n10 ACT   2000 Q2  557.\n# i 630 more rows\n```\n\n\n:::\n:::\n\n\nThe data now contains 8 separate time series, each with different time series characteristics:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_state %>% \n  autoplot(Trips)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/tourism-state-plot-1.png){width=816}\n:::\n:::\n\n\nThis is where the automatic model selection in *fable* is particularly useful. The `model()` function will estimate a specified model to all series in the data, so producing many models is simple.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- tourism_state %>% \n  model(\n    ets = ETS(Trips),\n    arima = ARIMA(Trips)\n  ) %>% \n  mutate(\n    average = (ets + arima)/2\n  )\nfit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A mable: 8 x 4\n# Key:     State [8]\n  State                       ets                    arima       average\n  <chr>                   <model>                  <model>       <model>\n1 ACT                <ETS(M,A,N)>           <ARIMA(0,1,1)> <COMBINATION>\n2 New South Wales    <ETS(A,N,A)> <ARIMA(0,1,1)(0,1,1)[4]> <COMBINATION>\n3 Northern Territory <ETS(M,N,M)> <ARIMA(1,0,1)(0,1,1)[4]> <COMBINATION>\n4 Queensland         <ETS(A,N,A)>           <ARIMA(2,1,2)> <COMBINATION>\n5 South Australia    <ETS(M,N,A)> <ARIMA(1,0,1)(0,1,1)[4]> <COMBINATION>\n6 Tasmania           <ETS(M,N,M)> <ARIMA(0,0,3)(2,1,0)[4]> <COMBINATION>\n7 Victoria           <ETS(M,N,M)> <ARIMA(0,1,1)(0,1,1)[4]> <COMBINATION>\n8 Western Australia  <ETS(M,N,M)>           <ARIMA(0,1,3)> <COMBINATION>\n```\n\n\n:::\n:::\n\n\nEach row of a mable corresponds to a separate time series (uniquely identified by its keys). From the output we can see a wide variety of models have been chosen. Some models have trend, others have seasonality, some have neither trend nor seasonality!\n\nProducing forecasts and evaluating accuracy is no different whether you're modelling one time series or a hundred.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit %>% \n  forecast(h = \"2 years\") %>% \n  autoplot(tourism_state, level = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/state-fc-plot-1.png){width=816}\n:::\n:::\n\n\n# Extensibility with fabletools\n\nExtensibility is at the core of fable. *fable* is actually built as an extension of the more general [*fabletools* package](https://fabletools.tidyverts.org/). This allows extension modelling package developers to focus on writing methods specific to their model. More general methods used in modelling and forecasting are provided automatically by *fabletools*.\n\nDepending on the chosen model, the following features are supported: \n\n* Forecasting (`forecast()`)\n* Missing value interpolation (`interpolate()`)\n* Reporting model output (`report()`)\n* Simulation of future paths (`generate()`)\n* Streaming new data (`stream()`)\n* Re-estimation (`refit()`)\n* Decomposition of model components (`components()`)\n* Model equation output (`equation()`)\n* Broom verbs (`augment()`, `coef()`/`tidy()`, `glance()`)\n* Model fits (`fitted()`, `residuals()`)\n\nGeneral *fabletools* functionality for all models include:\n\n* Seamless integration with existing packages in the tidyverse\n* Tools for consistent modelling interface design (such as formula parsing)\n* Response transformations and back-transformations with bias adjustment\n* Batch modelling with parallelisation\n* Forecast distributions and intervals\n* Visualisation of time series, decompositions, and forecasts (`autoplot()`)\n* Accuracy evaluation (`accuracy()`) with [many accuracy measures](https://fabletools.tidyverts.org/reference/index.html#section-accuracy-evaluation)\n* Model combination (`combination_model()` / `(ets + arima)/2`)\n* Decomposition modelling (`decomposition_model()`)\n* Forecast reconciliation (`reconcile()`, `min_trace()`)\n\nKeep an eye out for more extension modelling packages being released this year!\n\n# Read more about fable\n\nWhile this blog post is long and covers a lot of things about forecasting with fable, it is far from comprehensive. Currently, the best resource for learning forecasting with fable is the [*Forecasting: Principles and Practices (3ed.)*](https://otexts.com/fpp3/) book, which is freely available online.\n\nSome other places with more information about *fable* include:\n\n* The [pkgdown website](http://fable.tidyverts.org/)\n* Rob Hyndman's blog post: [*Tidy forecasting in R*](https://robjhyndman.com/hyndsight/fable/)\n* The [*Introduction to fable*](http://fable.tidyverts.org/articles/fable.html) vignette\n* UseR!2019 talk: [*Flexible futures for fable functionality*](https://www.youtube.com/watch?v=DhDOTxojQ3k)\n* The [GitHub repository](https://github.com/tidyverts/fable/)\n\n<!-- --- -->\n<!-- Tidy time series -->\n\n<!-- Recent time series challenges are characterised by the need to forecast many time series that are observed very frequently.    -->\n\n<!-- Using appropriate data structures is an essential first step in tackling these challenges. Many temporal data structures have been proposed in the past, each attempting to find a balance between efficiency and generality. On the two extremes of this spectrum are `ts` and `tsibble` (used by forecast and fable packages respectively).  -->\n\n<!-- The `ts` class provides the bare minimum, making it very efficient but extremely limited. It consists of a vector of numbers, and 3 numbers describing the start, end, and frequency of the data. As a result, it is limited to a single time series that is observed at regular intervals.  -->\n\n<!-- ts object -->\n\n<!-- A `tsibble` is a tibble for time series, which makes it very general at the expense of some overhead. Many time series are stored in a tidy format using key variables, and multiple measurements (of any class) can be stored as measured variables in the columns. The data must also contain an index, which describes the time for each observation. This flexibility makes it suitable for working with time series commonly collected today.  -->\n\n<!-- tsibble object -->\n\n<!-- Which is better? In almost every case `tsibble`. If you're working with a single regularly spaced time series, `ts` may be slightly faster but you lose access to many great packages designed around tidy data. The use of `ts` in the forecast package is a common source of confusion for new forecasters: creating a ts object, frequency, plot axis.  -->\n\n<!-- Tidy temporal data with tsibble forms the foundation of fable, allowing existing data analysis skills to be used within a time series forecasting workflow.  -->\n\n<!-- tsibble plot -->\n\n<!-- Forecasting with fable -->\n<!-- Modelling functions in fable use a formula based interface, which should be familiar to those  -->\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}